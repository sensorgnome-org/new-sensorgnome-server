"""
Django settings for sensorgnome_server project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/


# Use a separate file for the secret key
# generate this file using: "python manage.py generate_secret_key"
# provided by: https://github.com/MickaelBergem/django-generate-secret-key
try:
    with open("secretkey.txt", 'r') as f:
        SECRET_KEY = f.read().strip()
except FileNotFoundError:
    SECRET_KEY = "temp"
    print("Secret key set to temporary value. Please run \"python manage.py generate_secret_key\" to generate one.")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_results',
    'django.contrib.gis',
    'rest_framework',
    'website',
    'message_queue',
    'rest_api',
    'sg_management',
    'user_management',
    'django_generate_secret_key',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sensorgnome_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sensorgnome_server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'HOST': 'sensorgnome-db',
        'PORT': 5432,
        'NAME': "sensorgnome-server",
        'USER': 'postgres',
        'PASSWORD': 'postgres',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'


# Celetry config
CELERY_BROKER_URL = 'amqp://admin:admin@sensorgnome-rabbit:5672//'
CELERY_RESULT_BACKEND = 'django-db'

# celery-message-consumer config
EVENT_CONSUMER_USE_DJANGO = True

EXCHANGES = {
    'default': {
        'name': 'sensorgnome-exchange',  # actual name of exchange in RabbitMQ
        'type': 'fanout',  # an AMQP exchange type
    },

}

EVENT_CONSUMER_EXCHANGES = {
    'default': {
        'name': 'sensorgnome-exchange',  # actual name of exchange in RabbitMQ
        'type': 'fanout',  # an AMQP exchange type
    },

}